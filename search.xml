<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Centos命令PAC科学上网</title>
      <link href="/Linux/Linux/Centos%E5%91%BD%E4%BB%A4PAC%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <url>/Linux/Linux/Centos%E5%91%BD%E4%BB%A4PAC%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<p>科学上网的整个过程如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求 ==&gt; privoxy ==&gt; ss ==&gt; ss server</span><br></pre></td></tr></table></figure><p>请求通常是http和https，通过配置环境变量，将请求转发到privoxy，而privoxy利用PAC技术，选择将流量转到ss客户端或者直接请求，当请求走ss客户端时，请求会被转发到国外的ss服务器上，从国外的ss服务器上访问指定的url获取数据，再将数据还回。</p><h3 id="安装">安装</h3><p>依赖于:</p><ul><li>python</li><li>pip</li><li>privoxy</li><li>shadowsocks</li></ul><p>安装命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release &amp;&amp; yum -y install python-pip &amp;&amp; pip install shadowsocks &amp;&amp; yum -y install privoxy</span><br></pre></td></tr></table></figure><h3 id="配置">配置</h3><ul><li><p>ss配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/etc/shadowsocks.json文件，没有则创建</span><br><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;:&quot;1.2.3.4&quot;,</span><br><span class="line">  &quot;server_port&quot;:18081,</span><br><span class="line">  &quot;local_address&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;local_port&quot;:1080,</span><br><span class="line">  &quot;password&quot;:&quot;xxxx&quot;,</span><br><span class="line">  &quot;method&quot;:&quot;aes-256-gcm&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## 配置说明：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;1.2.3.4&quot;,          # 服务器IP</span><br><span class="line">  &quot;server_port&quot;: 18081,         # 服务器Port</span><br><span class="line">  &quot;local_address&quot;: &quot;0.0.0.0&quot;,   # 本地监听IP</span><br><span class="line">  &quot;local_port&quot;: 1080,           # 本地监听Port</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-gcm&quot;,      # 加密方式</span><br><span class="line">  &quot;password&quot;: &quot;xxxx&quot;            # server密码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令为： <code>sslocal -c /etc/shadowsocks.json -d start</code></p></li><li><p>privoxy配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -4sSkLO https://raw.github.com/zfl9/gfwlist2privoxy/master/gfwlist2privoxy</span><br><span class="line">bash gfwlist2privoxy &apos;127.0.0.1:1080&apos;</span><br><span class="line">mv -f gfwlist.action /etc/privoxy</span><br><span class="line">echo &apos;actionsfile gfwlist.action&apos; &gt;&gt; /etc/privoxy/config</span><br></pre></td></tr></table></figure><p>命令如下: <code>systemctl start/restart/stop privoxy.service</code></p></li><li><p>代理配置（环境变量）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># privoxy 默认监听端口为 8118</span><br><span class="line">proxy=&quot;http://127.0.0.1:8118&quot;</span><br><span class="line">export http_proxy=$proxy</span><br><span class="line">export https_proxy=$proxy</span><br><span class="line">export no_proxy=&quot;localhost, 127.0.0.1, ::1&quot;</span><br><span class="line"></span><br><span class="line"># no_proxy 环境变量是指不经过 privoxy 代理的地址或域名</span><br><span class="line"># 只能填写具体的 IP、域名后缀，多个条目之间使用 &apos;,&apos; 逗号隔开</span><br><span class="line"># 比如: export no_proxy=&quot;localhost, 192.168.1.1, ip.cn, chinaz.com&quot;</span><br><span class="line"># 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理</span><br></pre></td></tr></table></figure></li></ul><h3 id="调试">调试</h3><ul><li><p>以调试模式启动privoxy</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop privoxy.service</span><br><span class="line">privoxy &lt;(cat /etc/privoxy/config; echo -e &apos;debug 1\ndebug 2\ndebug 1024\ndebug 4096\ndebug 8192&apos;)</span><br></pre></td></tr></table></figure></li><li><p>通过日志判断PAC模式是否生效</p><ul><li>查看日志: <code>tail -f /var/log/privoxy/logfile</code></li><li>执行命令:<ul><li><code>curl -4sSkL https://www.baidu.com</code></li><li><code>curl -4sSkL https://www.google.com</code></li></ul></li></ul><p>首先需要确保能够<code>curl</code>到数据，然后分别对比在访问百度和Google时的Debug日志，其中在访问Google时，会提示 <code>Overriding forwarding settings based on &#39;forward-socks5 127.0.0.1:1080 .&#39;</code>，这表明PAC生效。</p></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> GFW </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java集合的fail-fast和fail-safe机制</title>
      <link href="/Java/Java/Java%E9%9B%86%E5%90%88%E7%9A%84fail-fast%E5%92%8Cfail-safe%E6%9C%BA%E5%88%B6/"/>
      <url>/Java/Java/Java%E9%9B%86%E5%90%88%E7%9A%84fail-fast%E5%92%8Cfail-safe%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h3 id="（一）fail-fast_机制">（一）<code>fail-fast</code> 机制</h3><p><code>fail-fast</code> 是指当通过 <code>Iterator</code> 去遍历集合时，如果存在另一个线程同时去修改该集合，将会抛出一个 <code>ConcurrentModificationException</code> 的异常，这种行为被称为 <code>fail-fast</code>。以下用 <code>ArrayList</code> 举例，可以发现其迭代器如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class="line">    int cursor;       // index of next element to return</span><br><span class="line">    int lastRet = -1; // index of last element returned; -1 if no such</span><br><span class="line">    int expectedModCount = modCount;</span><br><span class="line">    public boolean hasNext() &#123;</span><br><span class="line">        return cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line">    public E next() &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void remove() &#123;</span><br><span class="line">        if (lastRet &lt; 0)</span><br><span class="line">            throw new IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line">        // ..</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123;</span><br><span class="line">        // ..</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line">    final void checkForComodification() &#123;</span><br><span class="line">        if (modCount != expectedModCount)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在调用 <code>next()</code> 时，会调用 <code>checkForComodification()</code> 函数，该函数仅仅用于比较 <code>expectedModCount</code> 与 <code>modCount</code>是否相等。<code>modCount</code> 是 <code>ArrayList</code> 中的一个变量，当创建 <code>Itr</code> 这个迭代器时，将会为 <code>expectedModCount</code> 赋值。也就是说当 <code>modCount</code> 改变时，将会触发 <code>fail-fast</code> 机制。那什么地方会修改 <code>modCount</code> 呢？在 <code>ArrayList</code> 有如下的代码:</p><p>其增加方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line"> //..</span><br><span class="line">&#125;</span><br><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">    // ..</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">// ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其删除方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public E remove(int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    // ..</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void fastRemove(int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"> // ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其 <code>clear</code> 方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void clear() &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">// ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其增加、删除的操作，都会影响 <code>modCount</code>，即所有的影响集合大小的操作，都将使 <code>modCount</code> 改变。</p><h3 id="（二）fail-safe_机制">（二）<code>fail-safe</code> 机制</h3><p><code>fail-safe</code>与<code>fail-fast</code>相对应，<code>fail-fast</code>用于避免用户并发修改数据，而<code>fail-safe</code>则是为保证让用户能够并发地访问及修改数据，当然如果可以并发修改数据，也就不会抛出<code>ConcurrentModificationException</code>。以下就简单地分析一下并发集合<code>ConcurrentHashMap</code>是如何处理的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// P1</span><br><span class="line">static final class EntryIterator&lt;K,V&gt; extends BaseIterator&lt;K,V&gt;</span><br><span class="line">        implements Iterator&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    public final Map.Entry&lt;K,V&gt; next() &#123;</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        if ((p = next) == null)</span><br><span class="line">            throw new NoSuchElementException();</span><br><span class="line">        K k = p.key;</span><br><span class="line">        V v = p.val;</span><br><span class="line">        lastReturned = p;</span><br><span class="line">        advance();</span><br><span class="line">        return new MapEntry&lt;K,V&gt;(k, v, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// P2</span><br><span class="line">static class BaseIterator&lt;K,V&gt; extends Traverser&lt;K,V&gt; &#123;</span><br><span class="line">        final ConcurrentHashMap&lt;K,V&gt; map;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    public final void remove() &#123;</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        if ((p = lastReturned) == null)</span><br><span class="line">            throw new IllegalStateException();</span><br><span class="line">        lastReturned = null;</span><br><span class="line">        map.replaceNode(p.key, null, null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>fail-fast</code>中，主要关注的其<code>iterator</code>，而<code>iterator</code>的关键点在于其<code>remove</code>方法的处理方式。在<code>ConcurrentHashMap</code>中<code>iterator</code>的本质就是<code>EntryIterator</code>对象，通过代码可以看到，其删除操作，并不是一个真正的删除，而是临时将对象的值设置为null，所以<code>ConcurrentHashMap</code>不能存值为NULL的对象。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>配置中心选型</title>
      <link href="/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/Config/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E9%80%89%E5%9E%8B/"/>
      <url>/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/Config/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E9%80%89%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="(一)_背景">(一) 背景</h3><h4 id="为什么需要配置中心">为什么需要配置中心</h4><p>传统的基于文件的配置方式，存在很多问题，诸如: 修改配置需要重新部署，权限控制、不同的环境需要重新编译等等。配置中心将所有的配置集中控制，提供方便的配置方式、热部署、修改配置后代码自动感知，能提供便利的同时，减少开发的复杂度。公司的项目越来越多，配置中心则变成越来越急迫。</p><h4 id="已有zookeeper、etcd还需要引入吗？">已有zookeeper、etcd还需要引入吗？</h4><p><code>zookeeper</code>、<code>etcd</code>并没有方便的UI管理工具，且缺乏权限、审核等机制，使用并不方便，最重要的是，<code>etcd</code>和<code>zookeeper</code>通常定义为服务注册中心，并非配置中心。</p><h4 id="有哪些开源配置中心">有哪些开源配置中心</h4><ul><li><p>spring-cloud/spring-cloud-config<br>  <a href="https://github.com/spring-cloud/spring-cloud-config" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-config</a><br>  spring出品，可以和spring cloud无缝配合</p></li><li><p>淘宝 diamond<br>  <a href="https://github.com/takeseem/diamond" target="_blank" rel="noopener">https://github.com/takeseem/diamond</a><br>  已经不维护</p></li><li><p>disconf<br>  <a href="https://github.com/knightliao/disconf" target="_blank" rel="noopener">https://github.com/knightliao/disconf</a><br>  java开发，蚂蚁金服技术专家发起，在百度、滴滴等大公司内广泛使用</p></li><li><p>ctrip apollo<br>  <a href="https://github.com/ctripcorp/apollo/" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/</a><br>  Apollo（阿波罗）是携程框架部门研发的开源配置管理中心，具备规范的权限、流程治理等特性。</p></li></ul><h3 id="我们需要的功能有哪些">我们需要的功能有哪些</h3><ol><li>可以在界面上配置</li><li>通过Http请求获取最新配置</li><li>支持多环境</li><li>配置变更，通过http请求接受到通知</li><li>提供API接口，用于修改参数</li><li>权限、审计功能完善</li><li>高可用、健壮</li><li>活跃度高</li></ol><h3 id="(二)_配置中心如何选择？">(二) 配置中心如何选择？</h3><p>基于公司的情况，我们首先会排除<code>spring-cloud-config</code>和<code>diamond</code>，<code>spring-cloud-config</code>是<code>spring cloud</code>和<code>spring boot</code>的一部分，这将限制其语言只能是<code>java</code>和<code>spring</code>框架，而我们公司项目所使用的语言很多，不仅仅有<code>Java</code>还有<code>Go</code>、<code>php</code>，所以会排除<code>spring-cloud-config</code>。而<code>diamond</code>现在已经不开源，在<code>github</code>的项目大多是很早之前<code>diamond</code>开源出来时而<code>fork</code>出来的分支，所以<code>diamond</code>也不考虑。接下来，从各个方面深入比较<code>disconf</code>和<code>apollo</code>项目。</p><table><thead><tr><th>功能点</th><th>优先级</th><th>disconf</th><th>apollo</th></tr></thead><tbody><tr><td>可以在界面上配置</td><td>高</td><td>支持</td><td>支持</td></tr><tr><td>通过Http请求获取最新配置</td><td>高</td><td>支持</td><td>支持</td></tr><tr><td>支持多环境</td><td>高</td><td>支持</td><td>支持</td></tr><tr><td>配置变更，通过http请求接受到通知</td><td>高</td><td>不支持</td><td>不支持</td></tr><tr><td>提供API接口，用于修改参数</td><td>中</td><td>支持</td><td>支持</td></tr><tr><td>权限、审计功能完善</td><td>中</td><td>不支持</td><td>支持</td></tr><tr><td>高可用、健壮</td><td>高</td><td>高可用</td><td>高可用</td></tr><tr><td>活跃度高</td><td>高</td><td>活跃度不高，在github上最新一次修改是2年前</td><td>活跃度很高，最近一次修改在2018年10月10号</td></tr><tr><td>依赖项</td><td>高</td><td>依赖于mysql、tomcat、nginx、zookeeper、redis</td><td>依赖于mysql、eureka</td></tr><tr><td>客户端的支持</td><td>高</td><td>只支持Java客户端</td><td>客户端支持Java、php、Go、.Net等，Java和.Net是官方支持的，其它是社区开发</td></tr></tbody></table><h4 id="Disconf的优点"><code>Disconf</code>的优点</h4><p>项目出现比较早，经过了很多大公司的实践，高可用和稳定性方面都是毋庸置疑的</p><h4 id="Disconf的缺点"><code>Disconf</code>的缺点</h4><ol><li>项目很久没有更新，即是缺点也是优点，说明该项目很稳定，但是同时，如果有新的功能，也只能是自己开发</li><li>功能比较基础，无权限、审计功能，界面也很简单</li><li>依赖项比较多，不仅仅依赖于<code>zookeeper</code>，还依赖于<code>redis</code>，而且<code>redis</code>必须为集群</li><li>部署麻烦，依赖于<code>tomcat</code>、<code>nginx</code></li></ol><h4 id="Apollo的优点"><code>Apollo</code>的优点</h4><ol><li>使用该项目的公司越来越多</li><li>功能强大: 权限、审计、灰度、版本控制，几乎你能想到，并且实际可用的功能都已经有了</li><li>文档完整</li><li>部署简单，部署的包都是<code>jar</code></li><li>仅仅只是依赖于<code>mysql</code>和<code>eureka</code>，并且<code>eureka</code>已经集成到<code>jar</code>中，并不需要自己维护</li></ol><h4 id="Apollo的缺点"><code>Apollo</code>的缺点</h4><p>虽然越来越多的公司接入<code>Apollo</code>，但是<code>Apollo</code>相对于<code>Disconf</code>而言，还是更年轻，并且版本并不稳定，更新频率比较高。</p><p>最终的还是选择<strong><code>Apollo</code></strong>项目。</p><h3 id="(三)_如何解决配置变更，通过Http请求通知相应服务？">(三) 如何解决配置变更，通过Http请求通知相应服务？</h3><p>可借助公司内部的<code>QBus</code>项目进行实现。</p>]]></content>
      
      <categories>
          
          <category> 配置中心 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
