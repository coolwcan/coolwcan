<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>k8s环境下的日志收集方案</title>
      <link href="/K8S/K8S/k8s%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/"/>
      <url>/K8S/K8S/k8s%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h3 id="日志需求">日志需求</h3><ol><li>业务方只管将日志写到磁盘，至于磁盘上文件，如何同步到<code>ElasticSearch</code>中，用户不需要花过多的精力关注</li><li>在采集端做解析</li><li>使用json进行传输数据</li></ol><p>日志需要避免直接写入<code>kafka</code>中，当出现问题后，如果kafka同步到<code>ElasticSearch</code>也出现了问题，将导致无法快速解决问题。在采集端做解析，有两个考虑，首先在采集端做解析，就能统一后端的日志传输格式（json）；其次避免了集中式的日志采集，能够减少出现异常时异常影响范围，而且也能减少<code>Logstash</code>端的压力。</p><h3 id="常见的日志收集框架">常见的日志收集框架</h3><ul><li>fluent-bit</li><li>fluentd</li><li>filebeat</li></ul><p>filebeat不提供解析的功能，如果需要解析的话，需要在elasticsearch开启ingest特性。而fluentd和fluent-bit相较而言比较类似，fluent-bit只是比fluentd更轻量级，都提供解析功能，并且统一输出为json格式。但是在使用fluent-bit一段时间后，发现fluent-bit并不是很稳定。</p><h3 id="常见k8s日志收集策略">常见k8s日志收集策略</h3><p>大体上有两种日志收集方案: Sidecar方案和Node方案。</p><ul><li><p>Sidecar方案<br>给每一个需要收集日志的Pod中添加一个附属的日志收集容器，业务容器与日志收集容器共享磁盘。</p><p>其优点如下:</p><ol><li>可以为每个业务定制日志收集策略</li></ol><p>其缺点如下:</p><ol><li>浪费资源</li><li>如果日志容器宕机，会影响业务容器</li></ol></li><li><p>Node方案<br>在每个节点上部署一个日志收集实例，采集当前节点下的所有Pod的日志信息</p><p>其优点如下:</p><ol><li>占用资源小</li><li>日志收集实例不会影响到业务容器的状态</li></ol><p>其缺点如下:</p><ol><li>不能定制化日志收集策略</li></ol></li></ul><h4 id="log-pilot的原理">log-pilot的原理</h4><p>log-pilot会以DaemonSet的形式运行在k8s集群，由于daemonSet的特性，会使每一个节点上有且仅有一个log-pilot在运行。在每一个节点上，log-pilot会以Pod的形式存在。该Pod有如下关键资源:</p><ul><li>该Pod会将节点的<code>/</code>目录挂载进Pod里面的<code>/host</code>目录，这样log-pilot在Pod里面能够访问节点的所有文件</li><li>该Pod里面，会存在fluentd或者filebeat进程，能够进行日志采集</li></ul><p>而log-pilot会做如下事情：</p><ul><li>首先会监听当前节点的docker事件，当出现<code>start</code>或者<code>restart</code>事件时，会从事件中获取容器ID</li><li>通过 <code>docker inspect</code> 获取容器信息。主要获取容器的磁盘挂载信息和环境变量。</li><li>通过结合环境变量传入的信息，和磁盘的挂载信息，能够在当前Pod的<code>/host</code>找到相应的日志</li><li>log-pilot根据以上信息，生成filebeat或者fluentd的配置文件</li><li>通过发送信号，重启filebeat或者fluentd，从而采集新的容器日志</li></ul><h3 id="最终的日志方案">最终的日志方案</h3><p>访方案仅仅针对<strong>k8s环境</strong>，需要在k8s集群中部署一个log-pilot的daemonset，利用daemonset的特性，会保证每一个k8s所有节点上会自动部署仅仅一个log-pilot，而log-pilot则负责当前节点的所有日志收集工作。log-pilot采用了fluentd的实现。整个流程如下:</p><p> <img src="pics/日志方案流程图.png" alt="日志方案流程图.png"></p><p>为了能够保证log-pilot能够正常工作，在整个过程中有如下规范。规范主要分为三大类：</p><ul><li><p>日志路径规范</p><ul><li>在每一个k8s节点上，都会存在一个<code>/logs1</code>的目录，该目录是通过<code>LVM</code>的方式进行管理，能够实现磁盘的动态扩容。而每一个线上需要收集日志的Daemonset、Deployment需要将节点上的<code>/logs1</code>，通过<code>hostPath</code>的方式挂载到<code>Pod</code>上，<code>Pod</code>里面的进程需要将日志收集到挂载的目录上。</li><li><p>因为当前k8s上的所有<code>Pod</code>都会将日志写到<code>/logs1</code>目录下，为了避免日志相互影响，所以日志的目录有如下的规范。<br><code>/data/logs/{team}/{project}/{tier}-{pod名字}.log</code></p><ul><li><code>team</code>，团队名，英文名</li><li><code>project</code>，项目名，英文名</li><li><code>tier</code>，模块名，英文名</li><li><code>Pod名字</code></li></ul></li></ul></li><li><p><strong>日志清理规范</strong><br>磁盘的清理，需要每个业务线根据申请的磁盘大小，设定磁盘清理策略。</p></li><li><p>ElasticSearch的索引前缀规范<br>和DBA沟通过，DBA做了如下的规范:</p><ul><li>日志必须是json格式</li><li>主题名应该业务名加功能名，比如qbus-message-log</li><li><code>ElasticSearch</code>中的每一条记录的<code>@timestamp</code>字段，默认为日志进入<code>ElasticSearch</code>的时间，如果需要将日志中的时间作为es中的<code>@timestamp</code>字段，那么日志中的时间字段必须为<code>timestamp</code>，其格式为时间戳。</li><li>Ckafka的主题名和<code>ElasticSearch</code>的索引名前缀保持一致，默认按天新建索引。现在不支持自定义。</li></ul></li></ul><p>访方案的优缺点:</p><p>优点:</p><ul><li>业务团队无需要花费过多的精力去做日志收集，这是一种声明的方式，如果你需要日志收集功能就通过环境变量传入参数</li><li>不必创建额外的日志收集进程，整个节点只会存在一个收集程序</li></ul><p>缺点:</p><ul><li>不灵活，无法针对某些日志进行特定操作，比如修改数据类型</li><li>一旦日志采集程序出异常，将会影响当前节点的所有Pod的日志采集</li><li>Log-Pilot如果需要大的调整，影响面会很大，且不容易升级</li><li>线上Log-pilot出现问题，担心以现在的运维能力可能不能及时解决问题</li></ul><h3 id="如何部署?">如何部署?</h3><ul><li>在每一个节点上，以<code>LVM</code>的方式管理一个<code>/logs1</code>目录</li><li>在k8s集群中创建log-pilot服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: extensions/v1beta1</span><br><span class="line">kind: DaemonSet</span><br><span class="line">metadata:</span><br><span class="line">  name: log-pilot</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: log-pilot</span><br><span class="line">  namespace: devops</span><br><span class="line">spec:</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: log-pilot</span><br><span class="line">  updateStrategy:</span><br><span class="line">    type: RollingUpdate</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: log-pilot</span><br><span class="line">    spec:</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: kuainiujinke-registry</span><br><span class="line">      tolerations:</span><br><span class="line">        - key: node-role.kubernetes.io/master</span><br><span class="line">          effect: NoSchedule</span><br><span class="line">      containers:</span><br><span class="line">        - name: log-pilot</span><br><span class="line">          image: registry.kuainiujinke.com/middleware/log-pilot:fluentd-1.2.6</span><br><span class="line">          imagePullPolicy: Always</span><br><span class="line">          resources:</span><br><span class="line">            requests:</span><br><span class="line">              cpu: 200m</span><br><span class="line">              memory: 200Mi</span><br><span class="line">            limits:</span><br><span class="line">              cpu: 500m</span><br><span class="line">              memory: 500Mi</span><br><span class="line">          env:</span><br><span class="line">            - name: &quot;NODE_NAME&quot;</span><br><span class="line">              valueFrom:</span><br><span class="line">                fieldRef:</span><br><span class="line">                  fieldPath: spec.nodeName</span><br><span class="line">            - name: &quot;LOGGING_OUTPUT&quot;</span><br><span class="line">              value: &quot;kafka&quot;</span><br><span class="line">            - name: &quot;KAFKA_BROKERS&quot;</span><br><span class="line">              value: 10.1.1.21:9092</span><br><span class="line">          livenessProbe:</span><br><span class="line">            failureThreshold: 3</span><br><span class="line">            exec:</span><br><span class="line">              command:</span><br><span class="line">                - /pilot/healthz</span><br><span class="line">            initialDelaySeconds: 10</span><br><span class="line">            periodSeconds: 10</span><br><span class="line">            successThreshold: 1</span><br><span class="line">            timeoutSeconds: 2</span><br><span class="line">          volumeMounts:</span><br><span class="line">            - name: sock</span><br><span class="line">              mountPath: /var/run/docker.sock</span><br><span class="line">            - name: root</span><br><span class="line">              mountPath: /host</span><br><span class="line">              readOnly: true</span><br><span class="line">            - name: localtime</span><br><span class="line">              mountPath: /etc/localtime</span><br><span class="line">              readOnly: true</span><br><span class="line">            - name: pilot-pos</span><br><span class="line">              mountPath: /pilot/pos</span><br><span class="line">          securityContext:</span><br><span class="line">            capabilities:</span><br><span class="line">              add:</span><br><span class="line">                - SYS_ADMIN</span><br><span class="line">      terminationGracePeriodSeconds: 30</span><br><span class="line">      volumes:</span><br><span class="line">        - name: sock</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /var/run/docker.sock</span><br><span class="line">        - name: root</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /</span><br><span class="line">        - name: localtime</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /etc/localtime</span><br><span class="line">        - name: pilot-pos</span><br><span class="line">          hostPath:</span><br><span class="line">            path: /tmp/pos</span><br><span class="line">            type: DirectoryOrCreate</span><br></pre></td></tr></table></figure><p>  其中由于线上环境启用了容忍与污点机制，所以需要添加所有的污点所对应的容忍:</p><ul><li>运维开发组：node-role.kubernetes.io/devops=true:NoSchedule</li><li>中间件：node-role.kubernetes.io/middle=true:NoSchedule</li><li>贷后：node-role.kubernetes.io/fox=true:NoSchedule</li></ul><h3 id="如何接入？">如何接入？</h3><ul><li><p>将<code>/logs1</code>以<code>host</code>方式挂载到Pod里面的<code>/data/logs</code>目录下，然后将日志按<code>/data/logs/{team}/{project}/{tier}/{pod名字}/*.log</code>规范写入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- name: logs</span><br><span class="line">  hostPath:</span><br><span class="line">    path: /logs1</span><br><span class="line">    type: Directory</span><br></pre></td></tr></table></figure></li><li><p>通过Deployment或者StatefulSet的helm模板环境变量传入日志路径及解析相关信息</p><ol><li><code>aliyun_logs_$name</code><ol><li><code>$name</code> 可以自定义，<code>$name</code> 不能含有下划线’_’，用于声明日志</li><li>value 可以是 “stdout” ，或者为容器内日志文件的绝对路径</li></ol></li><li><code>aliyun_logs_$name.format</code> 日志格式，目前支持以下格式<ol><li>none：无格式纯文本。</li><li>json：json 格式，每行一个完整的 json 字符串。推荐使用。</li><li>regexp：正则，需要再添加一个环境变量，key为<code>aliyun_logs_$name.format.pattern</code>，value为就是正则表达式，可以在<code>https://rubular.com/</code>上进行验证</li></ol></li><li><code>aliyun_logs_$name.tags</code>，收集日志时，额外增加的字段，格式为 k1=v1,k2=v2，每个 key-value 之间使用逗号分隔，例如 <code>aliyun_logs_access.tags=&quot;name=hello,stage=test&quot;</code>，每一个日志，至少需要在添加如下几个标签:<ol><li>team，团队名</li><li>project，项目名</li><li>tier，模块名</li><li>app，应用名</li><li>env，环境，例如prod，test，stage，dev</li></ol></li><li><code>aliyun_logs_$name.target</code>，用于指定日志写入的<code>ckafka</code>主题名，实例名不需要配置。</li></ol></li></ul><p>按如上方式进行部署后，就能直接在kibana上通过如下操作进行查看:</p><ul><li>添加<code>index pattern</code></li><li>在<code>Discover</code>中进行查看</li></ul><h3 id="注意事项">注意事项</h3><ul><li>Dockerfile中创建目录，会被挂载的目录所覆盖，例如:<br>在Dockerfile中创建<code>/data/logs/AB/CD</code>目录，然后将宿主机的<code>/logs1</code>挂载Pod的到<code>/data/logs</code>目录下，如果<code>/logs1</code>目录下并没有<code>AB</code>目录，那么进入到容器里面会发现在Dockerfile中创建的目录<code>/data/logs/AB/CD</code>并不存在。</li></ul>]]></content>
      
      <categories>
          
          <category> K8S </category>
          
      </categories>
      
      
        <tags>
            
            <tag> K8S </tag>
            
            <tag> 日志 </tag>
            
            <tag> Log-pilot </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos命令PAC科学上网</title>
      <link href="/Linux/Linux/Centos%E5%91%BD%E4%BB%A4PAC%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
      <url>/Linux/Linux/Centos%E5%91%BD%E4%BB%A4PAC%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
      <content type="html"><![CDATA[<p>科学上网的整个过程如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请求 ==&gt; privoxy ==&gt; ss ==&gt; ss server</span><br></pre></td></tr></table></figure><p>请求通常是http和https，通过配置环境变量，将请求转发到privoxy，而privoxy利用PAC技术，选择将流量转到ss客户端或者直接请求，当请求走ss客户端时，请求会被转发到国外的ss服务器上，从国外的ss服务器上访问指定的url获取数据，再将数据还回。</p><h3 id="安装">安装</h3><p>依赖于:</p><ul><li>python</li><li>pip</li><li>privoxy</li><li>shadowsocks</li></ul><p>安装命令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release &amp;&amp; yum -y install python-pip &amp;&amp; pip install shadowsocks &amp;&amp; yum -y install privoxy</span><br></pre></td></tr></table></figure><h3 id="配置">配置</h3><ul><li><p>ss配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/etc/shadowsocks.json文件，没有则创建</span><br><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;:&quot;1.2.3.4&quot;,</span><br><span class="line">  &quot;server_port&quot;:18081,</span><br><span class="line">  &quot;local_address&quot;: &quot;0.0.0.0&quot;,</span><br><span class="line">  &quot;local_port&quot;:1080,</span><br><span class="line">  &quot;password&quot;:&quot;xxxx&quot;,</span><br><span class="line">  &quot;method&quot;:&quot;aes-256-gcm&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## 配置说明：</span><br><span class="line">&#123;</span><br><span class="line">  &quot;server&quot;: &quot;1.2.3.4&quot;,          # 服务器IP</span><br><span class="line">  &quot;server_port&quot;: 18081,         # 服务器Port</span><br><span class="line">  &quot;local_address&quot;: &quot;0.0.0.0&quot;,   # 本地监听IP</span><br><span class="line">  &quot;local_port&quot;: 1080,           # 本地监听Port</span><br><span class="line">  &quot;method&quot;: &quot;aes-256-gcm&quot;,      # 加密方式</span><br><span class="line">  &quot;password&quot;: &quot;xxxx&quot;            # server密码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令为： <code>sslocal -c /etc/shadowsocks.json -d start</code></p></li><li><p>privoxy配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -4sSkLO https://raw.github.com/zfl9/gfwlist2privoxy/master/gfwlist2privoxy</span><br><span class="line">bash gfwlist2privoxy &apos;127.0.0.1:1080&apos;</span><br><span class="line">mv -f gfwlist.action /etc/privoxy</span><br><span class="line">echo &apos;actionsfile gfwlist.action&apos; &gt;&gt; /etc/privoxy/config</span><br></pre></td></tr></table></figure><p>命令如下: <code>systemctl start/restart/stop privoxy.service</code></p></li><li><p>代理配置（环境变量）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># privoxy 默认监听端口为 8118</span><br><span class="line">proxy=&quot;http://127.0.0.1:8118&quot;</span><br><span class="line">export http_proxy=$proxy</span><br><span class="line">export https_proxy=$proxy</span><br><span class="line">export no_proxy=&quot;localhost, 127.0.0.1, ::1&quot;</span><br><span class="line"></span><br><span class="line"># no_proxy 环境变量是指不经过 privoxy 代理的地址或域名</span><br><span class="line"># 只能填写具体的 IP、域名后缀，多个条目之间使用 &apos;,&apos; 逗号隔开</span><br><span class="line"># 比如: export no_proxy=&quot;localhost, 192.168.1.1, ip.cn, chinaz.com&quot;</span><br><span class="line"># 访问 localhost、192.168.1.1、ip.cn、*.ip.cn、chinaz.com、*.chinaz.com 将不使用代理</span><br></pre></td></tr></table></figure></li></ul><h3 id="调试">调试</h3><ul><li><p>以调试模式启动privoxy</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop privoxy.service</span><br><span class="line">privoxy &lt;(cat /etc/privoxy/config; echo -e &apos;debug 1\ndebug 2\ndebug 1024\ndebug 4096\ndebug 8192&apos;)</span><br></pre></td></tr></table></figure></li><li><p>通过日志判断PAC模式是否生效</p><ul><li>查看日志: <code>tail -f /var/log/privoxy/logfile</code></li><li>执行命令:<ul><li><code>curl -4sSkL https://www.baidu.com</code></li><li><code>curl -4sSkL https://www.google.com</code></li></ul></li></ul><p>首先需要确保能够<code>curl</code>到数据，然后分别对比在访问百度和Google时的Debug日志，其中在访问Google时，会提示 <code>Overriding forwarding settings based on &#39;forward-socks5 127.0.0.1:1080 .&#39;</code>，这表明PAC生效。</p></li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Centos </tag>
            
            <tag> 科学上网 </tag>
            
            <tag> GFW </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java集合的fail-fast和fail-safe机制</title>
      <link href="/Java/Java/Java-%E9%9B%86%E5%90%88/"/>
      <url>/Java/Java/Java-%E9%9B%86%E5%90%88/</url>
      <content type="html"><![CDATA[<h3 id="（一）fail-fast_机制">（一）<code>fail-fast</code> 机制</h3><p><code>fail-fast</code> 是指当通过 <code>Iterator</code> 去遍历集合时，如果存在另一个线程同时去修改该集合，将会抛出一个 <code>ConcurrentModificationException</code> 的异常，这种行为被称为 <code>fail-fast</code>。以下用 <code>ArrayList</code> 举例，可以发现其迭代器如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">private class Itr implements Iterator&lt;E&gt; &#123;</span><br><span class="line">    int cursor;       // index of next element to return</span><br><span class="line">    int lastRet = -1; // index of last element returned; -1 if no such</span><br><span class="line">    int expectedModCount = modCount;</span><br><span class="line">    public boolean hasNext() &#123;</span><br><span class="line">        return cursor != size;</span><br><span class="line">    &#125;</span><br><span class="line">    public E next() &#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        // ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void remove() &#123;</span><br><span class="line">        if (lastRet &lt; 0)</span><br><span class="line">            throw new IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line">        // ..</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public void forEachRemaining(Consumer&lt;? super E&gt; consumer) &#123;</span><br><span class="line">        // ..</span><br><span class="line">        checkForComodification();</span><br><span class="line">    &#125;</span><br><span class="line">    final void checkForComodification() &#123;</span><br><span class="line">        if (modCount != expectedModCount)</span><br><span class="line">            throw new ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在调用 <code>next()</code> 时，会调用 <code>checkForComodification()</code> 函数，该函数仅仅用于比较 <code>expectedModCount</code> 与 <code>modCount</code>是否相等。<code>modCount</code> 是 <code>ArrayList</code> 中的一个变量，当创建 <code>Itr</code> 这个迭代器时，将会为 <code>expectedModCount</code> 赋值。也就是说当 <code>modCount</code> 改变时，将会触发 <code>fail-fast</code> 机制。那什么地方会修改 <code>modCount</code> 呢？在 <code>ArrayList</code> 有如下的代码:</p><p>其增加方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public boolean add(E e) &#123;</span><br><span class="line">    ensureCapacityInternal(size + 1);  // Increments modCount!!</span><br><span class="line"> //..</span><br><span class="line">&#125;</span><br><span class="line">private void ensureCapacityInternal(int minCapacity) &#123;</span><br><span class="line">    // ..</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line">private void ensureExplicitCapacity(int minCapacity) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">// ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其删除方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public E remove(int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    // ..</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private void fastRemove(int index) &#123;</span><br><span class="line">    modCount++;</span><br><span class="line"> // ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其 <code>clear</code> 方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public void clear() &#123;</span><br><span class="line">    modCount++;</span><br><span class="line">// ..</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到其增加、删除的操作，都会影响 <code>modCount</code>，即所有的影响集合大小的操作，都将使 <code>modCount</code> 改变。</p><h3 id="（二）fail-safe_机制">（二）<code>fail-safe</code> 机制</h3><p><code>fail-safe</code>与<code>fail-fast</code>相对应，<code>fail-fast</code>用于避免用户并发修改数据，而<code>fail-safe</code>则是为保证让用户能够并发地访问及修改数据，当然如果可以并发修改数据，也就不会抛出<code>ConcurrentModificationException</code>。以下就简单地分析一下并发集合<code>ConcurrentHashMap</code>是如何处理的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// P1</span><br><span class="line">static final class EntryIterator&lt;K,V&gt; extends BaseIterator&lt;K,V&gt;</span><br><span class="line">        implements Iterator&lt;Map.Entry&lt;K,V&gt;&gt; &#123;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    public final Map.Entry&lt;K,V&gt; next() &#123;</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        if ((p = next) == null)</span><br><span class="line">            throw new NoSuchElementException();</span><br><span class="line">        K k = p.key;</span><br><span class="line">        V v = p.val;</span><br><span class="line">        lastReturned = p;</span><br><span class="line">        advance();</span><br><span class="line">        return new MapEntry&lt;K,V&gt;(k, v, map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// P2</span><br><span class="line">static class BaseIterator&lt;K,V&gt; extends Traverser&lt;K,V&gt; &#123;</span><br><span class="line">        final ConcurrentHashMap&lt;K,V&gt; map;</span><br><span class="line">        </span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    public final void remove() &#123;</span><br><span class="line">        Node&lt;K,V&gt; p;</span><br><span class="line">        if ((p = lastReturned) == null)</span><br><span class="line">            throw new IllegalStateException();</span><br><span class="line">        lastReturned = null;</span><br><span class="line">        map.replaceNode(p.key, null, null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>fail-fast</code>中，主要关注的其<code>iterator</code>，而<code>iterator</code>的关键点在于其<code>remove</code>方法的处理方式。在<code>ConcurrentHashMap</code>中<code>iterator</code>的本质就是<code>EntryIterator</code>对象，通过代码可以看到，其删除操作，并不是一个真正的删除，而是临时将对象的值设置为null，所以<code>ConcurrentHashMap</code>不能存值为NULL的对象。</p>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Collection </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>配置中心选型</title>
      <link href="/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/Config/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E9%80%89%E5%9E%8B/"/>
      <url>/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/Config/%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E9%80%89%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h3 id="(一)_背景">(一) 背景</h3><h4 id="为什么需要配置中心">为什么需要配置中心</h4><p>传统的基于文件的配置方式，存在很多问题，诸如: 修改配置需要重新部署，权限控制、不同的环境需要重新编译等等。配置中心将所有的配置集中控制，提供方便的配置方式、热部署、修改配置后代码自动感知，能提供便利的同时，减少开发的复杂度。公司的项目越来越多，配置中心则变成越来越急迫。</p><h4 id="已有zookeeper、etcd还需要引入吗？">已有zookeeper、etcd还需要引入吗？</h4><p><code>zookeeper</code>、<code>etcd</code>并没有方便的UI管理工具，且缺乏权限、审核等机制，使用并不方便，最重要的是，<code>etcd</code>和<code>zookeeper</code>通常定义为服务注册中心，并非配置中心。</p><h4 id="有哪些开源配置中心">有哪些开源配置中心</h4><ul><li><p>spring-cloud/spring-cloud-config<br>  <a href="https://github.com/spring-cloud/spring-cloud-config" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-config</a><br>  spring出品，可以和spring cloud无缝配合</p></li><li><p>淘宝 diamond<br>  <a href="https://github.com/takeseem/diamond" target="_blank" rel="noopener">https://github.com/takeseem/diamond</a><br>  已经不维护</p></li><li><p>disconf<br>  <a href="https://github.com/knightliao/disconf" target="_blank" rel="noopener">https://github.com/knightliao/disconf</a><br>  java开发，蚂蚁金服技术专家发起，在百度、滴滴等大公司内广泛使用</p></li><li><p>ctrip apollo<br>  <a href="https://github.com/ctripcorp/apollo/" target="_blank" rel="noopener">https://github.com/ctripcorp/apollo/</a><br>  Apollo（阿波罗）是携程框架部门研发的开源配置管理中心，具备规范的权限、流程治理等特性。</p></li></ul><h3 id="我们需要的功能有哪些">我们需要的功能有哪些</h3><ol><li>可以在界面上配置</li><li>通过Http请求获取最新配置</li><li>支持多环境</li><li>配置变更，通过http请求接受到通知</li><li>提供API接口，用于修改参数</li><li>权限、审计功能完善</li><li>高可用、健壮</li><li>活跃度高</li></ol><h3 id="(二)_配置中心如何选择？">(二) 配置中心如何选择？</h3><p>基于公司的情况，我们首先会排除<code>spring-cloud-config</code>和<code>diamond</code>，<code>spring-cloud-config</code>是<code>spring cloud</code>和<code>spring boot</code>的一部分，这将限制其语言只能是<code>java</code>和<code>spring</code>框架，而我们公司项目所使用的语言很多，不仅仅有<code>Java</code>还有<code>Go</code>、<code>php</code>，所以会排除<code>spring-cloud-config</code>。而<code>diamond</code>现在已经不开源，在<code>github</code>的项目大多是很早之前<code>diamond</code>开源出来时而<code>fork</code>出来的分支，所以<code>diamond</code>也不考虑。接下来，从各个方面深入比较<code>disconf</code>和<code>apollo</code>项目。</p><table><thead><tr><th>功能点</th><th>优先级</th><th>disconf</th><th>apollo</th></tr></thead><tbody><tr><td>可以在界面上配置</td><td>高</td><td>支持</td><td>支持</td></tr><tr><td>通过Http请求获取最新配置</td><td>高</td><td>支持</td><td>支持</td></tr><tr><td>支持多环境</td><td>高</td><td>支持</td><td>支持</td></tr><tr><td>配置变更，通过http请求接受到通知</td><td>高</td><td>不支持</td><td>不支持</td></tr><tr><td>提供API接口，用于修改参数</td><td>中</td><td>支持</td><td>支持</td></tr><tr><td>权限、审计功能完善</td><td>中</td><td>不支持</td><td>支持</td></tr><tr><td>高可用、健壮</td><td>高</td><td>高可用</td><td>高可用</td></tr><tr><td>活跃度高</td><td>高</td><td>活跃度不高，在github上最新一次修改是2年前</td><td>活跃度很高，最近一次修改在2018年10月10号</td></tr><tr><td>依赖项</td><td>高</td><td>依赖于mysql、tomcat、nginx、zookeeper、redis</td><td>依赖于mysql、eureka</td></tr><tr><td>客户端的支持</td><td>高</td><td>只支持Java客户端</td><td>客户端支持Java、php、Go、.Net等，Java和.Net是官方支持的，其它是社区开发</td></tr></tbody></table><h4 id="Disconf的优点"><code>Disconf</code>的优点</h4><p>项目出现比较早，经过了很多大公司的实践，高可用和稳定性方面都是毋庸置疑的</p><h4 id="Disconf的缺点"><code>Disconf</code>的缺点</h4><ol><li>项目很久没有更新，即是缺点也是优点，说明该项目很稳定，但是同时，如果有新的功能，也只能是自己开发</li><li>功能比较基础，无权限、审计功能，界面也很简单</li><li>依赖项比较多，不仅仅依赖于<code>zookeeper</code>，还依赖于<code>redis</code>，而且<code>redis</code>必须为集群</li><li>部署麻烦，依赖于<code>tomcat</code>、<code>nginx</code></li></ol><h4 id="Apollo的优点"><code>Apollo</code>的优点</h4><ol><li>使用该项目的公司越来越多</li><li>功能强大: 权限、审计、灰度、版本控制，几乎你能想到，并且实际可用的功能都已经有了</li><li>文档完整</li><li>部署简单，部署的包都是<code>jar</code></li><li>仅仅只是依赖于<code>mysql</code>和<code>eureka</code>，并且<code>eureka</code>已经集成到<code>jar</code>中，并不需要自己维护</li></ol><h4 id="Apollo的缺点"><code>Apollo</code>的缺点</h4><p>虽然越来越多的公司接入<code>Apollo</code>，但是<code>Apollo</code>相对于<code>Disconf</code>而言，还是更年轻，并且版本并不稳定，更新频率比较高。</p><p>最终的还是选择<strong><code>Apollo</code></strong>项目。</p><h3 id="(三)_如何解决配置变更，通过Http请求通知相应服务？">(三) 如何解决配置变更，通过Http请求通知相应服务？</h3><p>可借助公司内部的<code>QBus</code>项目进行实现。</p>]]></content>
      
      <categories>
          
          <category> 配置中心 </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
